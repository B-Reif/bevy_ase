#![warn(missing_docs)]
//! Utilities for loading [`Aseprite`] files into a [`Bevy`] application.
//!
//! Provides [Loader](loader::Loader), an [AssetLoader](bevy::asset::AssetLoader) struct which directly
//! reads .aseprite files without an intermediate import step.
//! The loader adds [`Resources`] generated by the files' data.
//! Systems can invoke the loader's methods to start loading files,
//! or query the loading state.
//!
//! # Resources
//!
//! This library creates several types of resources:
//!
//! - [Texture](bevy::render::texture::Texture) data, which contains the file's images.
//! - [TextureAtlas](bevy::sprite::TextureAtlas) data, which contains mapping information for each sprite in a spritesheet.
//! - [Animation](asset::Animation) data.
//! - [Slice](asset::slice::Slice) data.
//! - [Tileset](asset::Tileset) data (from files created in Aseprite v1.3 beta).
//!
//! # Configuration
//!
//! This library exposes [a plugin](loader::AseLoaderDefaultPlugin) with default settings.
//! This plugin initializes all of the above resources as Asset types,
//! adds [Loader](loader::Loader) and [AseAssetLoader](loader::AseAssetLoader) resources,
//! and adds an [importer system function](loader::ase_importer) to process loaded ase data.
//! For a custom configuration, import the constituent parts and add them to AppBuilder directly.
//! The Texture resource is required to be initialized. Other asset types are optional.
//!
//! # Examples
//!
//! ```
//! use bevy::prelude::*;
//! use bevy_ase::asset::AseAsset;
//! use bevy_ase::loader::{AseLoaderDefaultPlugin, Loader};
//! use std::path::Path;
//!
//! // Initialize and run a bevy app with the default bevy_ase configuration.
//! fn main() {
//!     App::new()
//!         .add_plugins(DefaultPlugins)
//!         .add_plugin(AseLoaderDefaultPlugin)
//!         .add_system(load_sprites.system());
//! }
//!
//! // Get an aseprite asset and send it to the loader.
//! pub fn load_sprites(asset_server: Res<AssetServer>, mut loader: ResMut<Loader>) {
//!     let h: Handle<AseAsset> = asset_server.load(Path::new("sprites/hello.aseprite"));
//!     loader.add(h.clone());
//! }
//! ```
//!
//! # Optional Features
//!
//! ## Benimator
//!
//! When compiled with the "benimator" feature, this library includes a From implementation
//! to convert [Animation](asset::Animation) assets into benimator SpriteSheetAnimation assets.
//!
//! ### Example
//!
//! ```
//! use bevy::prelude::*;
//! use bevy_ase;
//! #[cfg(feature = "benimator")]
//! use benimator;
//!
//! // Creates a benimator animation asset whenever a bevy_ase animation asset is created.
//! #[cfg(feature = "benimator")]
//! pub fn convert_animation(
//!     mut event_reader: EventReader<AssetEvent<bevy_ase::asset::Animation>>,
//!     animations: Res<Assets<bevy_ase::asset::Animation>>,
//!     mut sprite_sheet_animations: ResMut<Assets<benimator::SpriteSheetAnimation>>,
//! ) {
//!     for evt in event_reader.iter() {
//!         if let AssetEvent::Created { handle } = evt {
//!             // Unwrap: Responding to Asset Created event, so asset exists
//!             let anim = animations.get(handle).unwrap();
//!             let converted_animation = anim.into();
//!             sprite_sheet_animations.add(converted_animation);
//!         }
//!     }
//! }
//! ```
//! [`Bevy`]: https://bevyengine.org/
//! [`Aseprite`]: https://www.aseprite.org/
//! [`Resources`]: https://bevyengine.org/learn/book/getting-started/resources/

/// Provides asset types for working with Aseprite data.
///
/// Data from Aseprite files moved into Bevy includes Textures, [Animations](asset::Animation),
/// [Slices](asset::slice::Slice), and [Tilesets](asset::Tileset). This module also provides
/// map resources to access assets by keying with a file path and an asset name.
pub mod asset;
#[cfg(feature = "benimator")]
/// Implements conversions from bevy_ase assets into benimator assets.
///
/// Enabled by the "benimator" feature. Provides a [From] &[Animation](asset::Animation)
/// implementation for benimator's SpriteSheetAnimation type,
/// and [From] &[Frame](asset::Frame) implementation for benimator's Frame type.
///
/// # Examples
///
/// ```
/// #[cfg(feature = "benimator")]
/// use bevy_ase::asset::{Animation, Frame};
/// use benimator::SpriteSheetAnimation;
///
/// // Create a benimator SpriteSheetAnimation from a reference to a bevy_ase Animation.
/// fn to_benimator_anim(animation: &Animation) -> SpriteSheetAnimation {
///     animation.into()       
/// }
///
/// // Create a benimator Frame from a a reference to a bevy_ase Frame.
/// fn to_benimator_frame(frame: &Frame) -> benimator::Frame {
///     frame.into()   
/// }
/// ```
pub mod benimator;

#[cfg(feature = "bevy_ecs_tilemap")]
/// Implements conversions from bevy_ase assets into bevy_ecs_tilemap assets.
///
/// Adds the [layer_settings](asset::Tileset::layer_settings) method to [Tileset](asset::Tileset).
pub mod bevy_ecs_tilemap;

/// Provides systems and resources for loading Aseprite files.
///
/// The default loader configuration provided by [loader::AseLoaderDefaultPlugin] contains
/// asset types and processing for all Aseprite data types provided by this library.
pub mod loader;
mod processing;
#[cfg(test)]
mod tests;
